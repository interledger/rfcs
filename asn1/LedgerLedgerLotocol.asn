LedgerLedgerLotocol
DEFINITIONS
AUTOMATIC TAGS ::=
BEGIN

IMPORTS
    UInt8,
    UInt32,
    UInt64,
    UInt128,
    UInt256
    FROM GenericTypes

    Address,
    Timestamp
    FROM InterledgerTypes
;

FreeRequest ::= SEQUENCE {
    -- Used to associate requests and corresponding responses
    -- MUST be either zero and non-repeating
    -- If requestId = 0, the server MUST not send a response
    requestId UInt128,
    packet InterledgerPacket
}

FreeResponse ::= SEQUENCE {
    -- Used to associate response to earlier FreeRequest
    requestIdRef UInt128,
    packet InterledgerPacket
}

PaidRequest ::= SEQUENCE {
    -- Used to associate requests and corresponding responses
    -- MUST be either zero and non-repeating
    -- If requestId = 0, the server MUST not send a response
    requestId UInt128,
    amount UInt64,
    packet InterledgerPacket
}

PaidResponse ::= SEQUENCE {
    -- Used to associate response to earlier PaidRequest
    requestIdRef UInt128,
    packet InterledgerPacket
}

PrepareRequest ::= SEQUENCE {
    -- Used to associate later response/fulfill/reject
    -- MUST be non-zero and non-repeating
    requestId UInt128,
    amount UInt64,
    condition UInt256,
    expiresAt Timestamp,
    packet InterledgerPacket
}

PrepareResponse ::= SEQUENCE {
    -- Used to confirm such a PrepareRequest
    requestIdRef UInt128
}

FulfillRequest ::= SEQUENCE {
    -- Used to fulfill an earlier PrepareRequest
    requestIdRef UInt128,
    fulfillment UInt256
}

FulfillResponse ::= SEQUENCE {
    -- Used to confirm such a FulfillRequest
    requestIdRef UInt128
}

RejectRequest ::= SEQUENCE {
    -- Used to reject an earlier PrepareRequest
    requestIdRef UInt128,
    rejectionReason InterledgerPacket,
}

RejectResponse ::= SEQUENCE {
    -- Used to confirm such a RejectRequest
    requestIdRef UInt128,
}

RequestStateRequest ::= SEQUENCE {
    -- Used to query the state of an earlier Prepare and possible Fulfill/Reject requests/responses
    requestIdRef UInt128,
}

RequestStateResponse ::= SEQUENCE {
    -- Used to respond to such a RequestStateRequest
    requestIdRef UInt128,
    state CHOICE {
      free NULL,
      paid NULL,
      prepared NULL,
      fulfillment UInt256,
      rejectionReason InterledgerPacket,
      nonExistent NULL
    },
}

CALL ::= CLASS {
    &typeId UInt8 UNIQUE,
    &Type
} WITH SYNTAX {&typeId &Type}

CallSet CALL ::= {
    -- All requests MUST use odd typeIds
    -- All responses MUST use even typeIds
    {1 FreeRequest} |
    {2 FreeResponse} |
    {3 PaidRequest} |
    {4 PaidResponse} |
    {5 PrepareRequest} |
    {6 PrepareResponse} |
    {7 FulfillRequest} |
    {8 FulfillResponse} |
    {9 RejectRequest} |
    {10 RejectResponse} |
    {11 RequestStateRequest} |
    {12 RequestStateResponse}
}

LedgerLedgerLotocolPacket ::= SEQUENCE {
    -- One byte type ID
    type CALL.&typeId ({CallSet}),
    -- Allow multiple from/to accounts to be multiplexed on one connection
    fromId UInt32,
    toId UInt32,
    -- Length-prefixed main data
    data CALL.&Type ({CallSet}{@type})
}

END
